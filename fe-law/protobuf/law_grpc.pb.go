// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: law.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LawRpcServiceClient is the client API for LawRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LawRpcServiceClient interface {
	GetGiantWhaleWalletAddressLaw(ctx context.Context, in *GiantWhaleWalletAddressLawReq, opts ...grpc.CallOption) (*GiantWhaleWalletAddressLawRep, error)
	GetNftCollectionsLaw(ctx context.Context, in *NftCollectionsLawReq, opts ...grpc.CallOption) (*NftCollectionsLawRep, error)
	GetSingleNftLaw(ctx context.Context, in *SingleNftLawReq, opts ...grpc.CallOption) (*SingleNftLawRep, error)
}

type lawRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLawRpcServiceClient(cc grpc.ClientConnInterface) LawRpcServiceClient {
	return &lawRpcServiceClient{cc}
}

func (c *lawRpcServiceClient) GetGiantWhaleWalletAddressLaw(ctx context.Context, in *GiantWhaleWalletAddressLawReq, opts ...grpc.CallOption) (*GiantWhaleWalletAddressLawRep, error) {
	out := new(GiantWhaleWalletAddressLawRep)
	err := c.cc.Invoke(ctx, "/fe_law.protobuf.LawRpcService/GetGiantWhaleWalletAddressLaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lawRpcServiceClient) GetNftCollectionsLaw(ctx context.Context, in *NftCollectionsLawReq, opts ...grpc.CallOption) (*NftCollectionsLawRep, error) {
	out := new(NftCollectionsLawRep)
	err := c.cc.Invoke(ctx, "/fe_law.protobuf.LawRpcService/GetNftCollectionsLaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lawRpcServiceClient) GetSingleNftLaw(ctx context.Context, in *SingleNftLawReq, opts ...grpc.CallOption) (*SingleNftLawRep, error) {
	out := new(SingleNftLawRep)
	err := c.cc.Invoke(ctx, "/fe_law.protobuf.LawRpcService/GetSingleNftLaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LawRpcServiceServer is the server API for LawRpcService service.
// All implementations must embed UnimplementedLawRpcServiceServer
// for forward compatibility
type LawRpcServiceServer interface {
	GetGiantWhaleWalletAddressLaw(context.Context, *GiantWhaleWalletAddressLawReq) (*GiantWhaleWalletAddressLawRep, error)
	GetNftCollectionsLaw(context.Context, *NftCollectionsLawReq) (*NftCollectionsLawRep, error)
	GetSingleNftLaw(context.Context, *SingleNftLawReq) (*SingleNftLawRep, error)
}

// UnimplementedLawRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLawRpcServiceServer struct {
}

func (UnimplementedLawRpcServiceServer) GetGiantWhaleWalletAddressLaw(context.Context, *GiantWhaleWalletAddressLawReq) (*GiantWhaleWalletAddressLawRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGiantWhaleWalletAddressLaw not implemented")
}
func (UnimplementedLawRpcServiceServer) GetNftCollectionsLaw(context.Context, *NftCollectionsLawReq) (*NftCollectionsLawRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftCollectionsLaw not implemented")
}
func (UnimplementedLawRpcServiceServer) GetSingleNftLaw(context.Context, *SingleNftLawReq) (*SingleNftLawRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleNftLaw not implemented")
}
func (UnimplementedLawRpcServiceServer) mustEmbedUnimplementedLawRpcServiceServer() {}

// UnsafeLawRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LawRpcServiceServer will
// result in compilation errors.
type UnsafeLawRpcServiceServer interface {
	mustEmbedUnimplementedLawRpcServiceServer()
}

func RegisterLawRpcServiceServer(s grpc.ServiceRegistrar, srv LawRpcServiceServer) {
	s.RegisterService(&LawRpcService_ServiceDesc, srv)
}

func _LawRpcService_GetGiantWhaleWalletAddressLaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiantWhaleWalletAddressLawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LawRpcServiceServer).GetGiantWhaleWalletAddressLaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fe_law.protobuf.LawRpcService/GetGiantWhaleWalletAddressLaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LawRpcServiceServer).GetGiantWhaleWalletAddressLaw(ctx, req.(*GiantWhaleWalletAddressLawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LawRpcService_GetNftCollectionsLaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftCollectionsLawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LawRpcServiceServer).GetNftCollectionsLaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fe_law.protobuf.LawRpcService/GetNftCollectionsLaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LawRpcServiceServer).GetNftCollectionsLaw(ctx, req.(*NftCollectionsLawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LawRpcService_GetSingleNftLaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleNftLawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LawRpcServiceServer).GetSingleNftLaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fe_law.protobuf.LawRpcService/GetSingleNftLaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LawRpcServiceServer).GetSingleNftLaw(ctx, req.(*SingleNftLawReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LawRpcService_ServiceDesc is the grpc.ServiceDesc for LawRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LawRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fe_law.protobuf.LawRpcService",
	HandlerType: (*LawRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGiantWhaleWalletAddressLaw",
			Handler:    _LawRpcService_GetGiantWhaleWalletAddressLaw_Handler,
		},
		{
			MethodName: "GetNftCollectionsLaw",
			Handler:    _LawRpcService_GetNftCollectionsLaw_Handler,
		},
		{
			MethodName: "GetSingleNftLaw",
			Handler:    _LawRpcService_GetSingleNftLaw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "law.proto",
}
