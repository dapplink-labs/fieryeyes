// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: services.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalRpcServiceClient is the client API for InternalRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalRpcServiceClient interface {
	GetAddressInfo(ctx context.Context, in *AddressInfoReq, opts ...grpc.CallOption) (*AddressInfoRep, error)
	GetNftCollectionsInfo(ctx context.Context, in *NftCollectionsInfoReq, opts ...grpc.CallOption) (*NftCollectionsInfoRep, error)
	GetNftInfo(ctx context.Context, in *NftInfoReq, opts ...grpc.CallOption) (*NftInfoRep, error)
}

type internalRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalRpcServiceClient(cc grpc.ClientConnInterface) InternalRpcServiceClient {
	return &internalRpcServiceClient{cc}
}

func (c *internalRpcServiceClient) GetAddressInfo(ctx context.Context, in *AddressInfoReq, opts ...grpc.CallOption) (*AddressInfoRep, error) {
	out := new(AddressInfoRep)
	err := c.cc.Invoke(ctx, "/fe_service.protobuf.InternalRpcService/GetAddressInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalRpcServiceClient) GetNftCollectionsInfo(ctx context.Context, in *NftCollectionsInfoReq, opts ...grpc.CallOption) (*NftCollectionsInfoRep, error) {
	out := new(NftCollectionsInfoRep)
	err := c.cc.Invoke(ctx, "/fe_service.protobuf.InternalRpcService/GetNftCollectionsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalRpcServiceClient) GetNftInfo(ctx context.Context, in *NftInfoReq, opts ...grpc.CallOption) (*NftInfoRep, error) {
	out := new(NftInfoRep)
	err := c.cc.Invoke(ctx, "/fe_service.protobuf.InternalRpcService/GetNftInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalRpcServiceServer is the server API for InternalRpcService service.
// All implementations must embed UnimplementedInternalRpcServiceServer
// for forward compatibility
type InternalRpcServiceServer interface {
	GetAddressInfo(context.Context, *AddressInfoReq) (*AddressInfoRep, error)
	GetNftCollectionsInfo(context.Context, *NftCollectionsInfoReq) (*NftCollectionsInfoRep, error)
	GetNftInfo(context.Context, *NftInfoReq) (*NftInfoRep, error)
}

// UnimplementedInternalRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInternalRpcServiceServer struct {
}

func (UnimplementedInternalRpcServiceServer) GetAddressInfo(context.Context, *AddressInfoReq) (*AddressInfoRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressInfo not implemented")
}
func (UnimplementedInternalRpcServiceServer) GetNftCollectionsInfo(context.Context, *NftCollectionsInfoReq) (*NftCollectionsInfoRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftCollectionsInfo not implemented")
}
func (UnimplementedInternalRpcServiceServer) GetNftInfo(context.Context, *NftInfoReq) (*NftInfoRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftInfo not implemented")
}
func (UnimplementedInternalRpcServiceServer) mustEmbedUnimplementedInternalRpcServiceServer() {}

// UnsafeInternalRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalRpcServiceServer will
// result in compilation errors.
type UnsafeInternalRpcServiceServer interface {
	mustEmbedUnimplementedInternalRpcServiceServer()
}

func RegisterInternalRpcServiceServer(s grpc.ServiceRegistrar, srv InternalRpcServiceServer) {
	s.RegisterService(&InternalRpcService_ServiceDesc, srv)
}

func _InternalRpcService_GetAddressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalRpcServiceServer).GetAddressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fe_service.protobuf.InternalRpcService/GetAddressInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalRpcServiceServer).GetAddressInfo(ctx, req.(*AddressInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalRpcService_GetNftCollectionsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftCollectionsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalRpcServiceServer).GetNftCollectionsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fe_service.protobuf.InternalRpcService/GetNftCollectionsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalRpcServiceServer).GetNftCollectionsInfo(ctx, req.(*NftCollectionsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalRpcService_GetNftInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalRpcServiceServer).GetNftInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fe_service.protobuf.InternalRpcService/GetNftInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalRpcServiceServer).GetNftInfo(ctx, req.(*NftInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalRpcService_ServiceDesc is the grpc.ServiceDesc for InternalRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fe_service.protobuf.InternalRpcService",
	HandlerType: (*InternalRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddressInfo",
			Handler:    _InternalRpcService_GetAddressInfo_Handler,
		},
		{
			MethodName: "GetNftCollectionsInfo",
			Handler:    _InternalRpcService_GetNftCollectionsInfo_Handler,
		},
		{
			MethodName: "GetNftInfo",
			Handler:    _InternalRpcService_GetNftInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
